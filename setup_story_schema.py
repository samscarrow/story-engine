#!/usr/bin/env python3
"""Setup dedicated STORY_DB schema in Oracle database."""

import os
import sys
import getpass
from pathlib import Path
from dotenv import load_dotenv

try:
    import oracledb
except ImportError:
    print("oracledb not available - run: pip install oracledb")
    sys.exit(1)


def create_story_schema():
    """Create dedicated STORY_DB schema with proper permissions."""

    # Load environment variables
    load_dotenv(".env.oracle")

    admin_user = os.getenv("DB_USER")  # Should be ADMIN
    admin_password = os.getenv("DB_PASSWORD")
    dsn = os.getenv("DB_DSN")
    wallet_location = os.getenv("DB_WALLET_LOCATION")

    # Get password for new STORY_DB user
    story_password = getpass.getpass("Enter password for STORY_DB user: ")
    if not story_password:
        print("Password required")
        return False

    # Set wallet location
    wallet_path = str(Path(wallet_location).resolve())
    os.environ["TNS_ADMIN"] = wallet_path

    try:
        print("1. Connecting as ADMIN...")
        conn = oracledb.connect(
            user=admin_user, password=admin_password, dsn=dsn, config_dir=wallet_path
        )

        cursor = conn.cursor()

        print("2. Checking if STORY_DB user already exists...")
        cursor.execute(
            """
            SELECT COUNT(*) FROM all_users WHERE username = 'STORY_DB'
        """
        )
        exists = cursor.fetchone()[0]

        if exists:
            print("⚠️  STORY_DB user already exists")
            drop = input("Drop and recreate? (y/N): ").lower().strip()
            if drop == "y":
                print("   Dropping existing STORY_DB user...")
                cursor.execute("DROP USER story_db CASCADE")
                print("   ✓ Dropped existing user")
            else:
                print("   Keeping existing user")
                cursor.close()
                conn.close()
                return True

        print("3. Creating STORY_DB user...")
        cursor.execute(
            f"""
            CREATE USER story_db IDENTIFIED BY "{story_password}"
        """
        )
        print("   ✓ Created STORY_DB user")

        print("4. Granting basic privileges...")
        privileges = [
            "CONNECT",
            "RESOURCE",
            "CREATE TABLE",
            "CREATE SEQUENCE",
            "CREATE VIEW",
            "CREATE PROCEDURE",
            "CREATE TRIGGER",
        ]

        for priv in privileges:
            cursor.execute(f"GRANT {priv} TO story_db")
            print(f"   ✓ Granted {priv}")

        print("5. Granting tablespace quota...")
        cursor.execute("GRANT UNLIMITED TABLESPACE TO story_db")
        print("   ✓ Granted unlimited tablespace")

        print("6. Creating story engine tables...")

        # Connect as STORY_DB user
        cursor.close()
        conn.close()

        print("   Connecting as STORY_DB...")
        story_conn = oracledb.connect(
            user="story_db", password=story_password, dsn=dsn, config_dir=wallet_path
        )

        story_cursor = story_conn.cursor()

        # Create tables
        tables = [
            # Main workflow outputs table
            """
            CREATE TABLE workflow_outputs (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                workflow_name VARCHAR2(255) NOT NULL,
                output_data CLOB NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                metadata JSON,
                CONSTRAINT workflow_outputs_name_idx 
                    UNIQUE (workflow_name, timestamp)
            )
            """,
            # Characters table
            """
            CREATE TABLE characters (
                id VARCHAR2(50) PRIMARY KEY,
                name VARCHAR2(255) NOT NULL,
                persona_data CLOB NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                metadata JSON
            )
            """,
            # World states table
            """
            CREATE TABLE world_states (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR2(255) NOT NULL,
                world_data CLOB NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                character_id VARCHAR2(50),
                location VARCHAR2(255),
                metadata JSON,
                FOREIGN KEY (character_id) REFERENCES characters(id)
            )
            """,
            # Scenes table
            """
            CREATE TABLE scenes (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR2(255) NOT NULL,
                scene_data CLOB NOT NULL,
                world_state_id NUMBER,
                character_ids CLOB, -- JSON array of character IDs
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                metadata JSON,
                FOREIGN KEY (world_state_id) REFERENCES world_states(id)
            )
            """,
        ]

        for i, table_sql in enumerate(tables, 1):
            try:
                story_cursor.execute(table_sql)
                table_name = table_sql.split("TABLE ")[1].split(" ")[0]
                print(f"   ✓ Created table: {table_name}")
            except oracledb.Error as e:
                if "ORA-00955" in str(e):  # Table already exists
                    table_name = table_sql.split("TABLE ")[1].split(" ")[0]
                    print(f"   - Table {table_name} already exists")
                else:
                    print(f"   ✗ Error creating table: {e}")
                    raise

        print("7. Creating indexes...")
        indexes = [
            "CREATE INDEX workflow_outputs_name_idx ON workflow_outputs(workflow_name)",
            "CREATE INDEX workflow_outputs_time_idx ON workflow_outputs(timestamp)",
            "CREATE INDEX characters_name_idx ON characters(name)",
            "CREATE INDEX world_states_char_idx ON world_states(character_id)",
            "CREATE INDEX world_states_loc_idx ON world_states(location)",
            "CREATE INDEX scenes_world_idx ON scenes(world_state_id)",
        ]

        for idx_sql in indexes:
            try:
                story_cursor.execute(idx_sql)
                idx_name = idx_sql.split("INDEX ")[1].split(" ")[0]
                print(f"   ✓ Created index: {idx_name}")
            except oracledb.Error as e:
                if "ORA-00955" in str(e):  # Index already exists
                    idx_name = idx_sql.split("INDEX ")[1].split(" ")[0]
                    print(f"   - Index {idx_name} already exists")
                else:
                    print(f"   ⚠️  Warning creating index: {e}")

        story_conn.commit()

        print("8. Testing basic operations...")

        # Test insert
        story_cursor.execute(
            """
            INSERT INTO workflow_outputs (workflow_name, output_data, metadata)
            VALUES ('schema_setup_test', '{"status": "success", "tables_created": 4}', 
                    '{"setup_version": "1.0", "test": true}')
        """
        )

        # Test select
        story_cursor.execute(
            """
            SELECT workflow_name, output_data FROM workflow_outputs 
            WHERE workflow_name = 'schema_setup_test'
        """
        )

        result = story_cursor.fetchone()
        if result:
            print(f"   ✓ Test insert/select successful: {result[0]}")

        story_conn.commit()

        print("9. Generating updated .env.oracle file...")
        env_content = f"""# Oracle Database Configuration - STORY_DB Schema
# Generated by setup_story_schema.py

# Database Type
DB_TYPE=oracle

# Oracle Connection Details for STORY_DB Schema
DB_USER=STORY_DB
DB_PASSWORD={story_password}
DB_DSN={dsn}

# Oracle Wallet Configuration
DB_WALLET_LOCATION={wallet_location}
DB_WALLET_PASSWORD={os.getenv('DB_WALLET_PASSWORD', '')}
TNS_ADMIN={wallet_location}

# Note: This configuration uses the dedicated STORY_DB schema
# Previous ADMIN configuration backed up to .env.oracle.admin
"""

        # Backup existing .env.oracle
        if Path(".env.oracle").exists():
            Path(".env.oracle").rename(".env.oracle.admin")
            print("   ✓ Backed up existing .env.oracle to .env.oracle.admin")

        # Write new configuration
        with open(".env.oracle", "w") as f:
            f.write(env_content)
        print("   ✓ Created new .env.oracle with STORY_DB configuration")

        story_cursor.close()
        story_conn.close()

        print("\n=== STORY_DB SCHEMA SETUP COMPLETE ===")
        print("\nTables created:")
        print("- workflow_outputs (main story engine outputs)")
        print("- characters (character personas and data)")
        print("- world_states (world state snapshots)")
        print("- scenes (generated scenes)")
        print("\nNext steps:")
        print("1. Test connection with: python test_oracle_connection_full.py")
        print("2. Update application code to use STORY_DB schema")
        print("3. Run story engine tests")

        return True

    except oracledb.Error as e:
        print(f"✗ Oracle error: {e}")

        if "12506" in str(e):
            print("! Database appears to be paused - resume in Oracle Cloud Console")
        elif "1017" in str(e):
            print("! Invalid username/password")
        elif "12154" in str(e):
            print("! TNS could not resolve connect identifier")

        return False

    except Exception as e:
        print(f"✗ Unexpected error: {e}")
        return False


if __name__ == "__main__":
    print("Oracle Story Engine Schema Setup")
    print("=" * 40)
    print()
    print("This will create a dedicated STORY_DB schema with:")
    print("- Dedicated user with minimal required privileges")
    print("- Story engine tables (workflow_outputs, characters, etc.)")
    print("- Appropriate indexes for performance")
    print("- Updated .env.oracle configuration")
    print()

    if input("Continue? (y/N): ").lower().strip() != "y":
        print("Aborted")
        sys.exit(0)

    success = create_story_schema()
    sys.exit(0 if success else 1)
