#!/usr/bin/env python3
"""Test Oracle database connection and schema operations."""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Add the current directory to Python path for imports
sys.path.insert(0, str(Path(__file__).parent))

from story_engine.core.storage.database import OracleConnection


def test_oracle_connection():
    """Test Oracle database connection and basic operations."""

    # Load environment variables
    load_dotenv(".env.oracle")

    # Get connection parameters
    user = os.getenv("DB_USER")
    password = os.getenv("DB_PASSWORD")
    dsn = os.getenv("DB_DSN")
    wallet_location = os.getenv("DB_WALLET_LOCATION")
    wallet_password = os.getenv("DB_WALLET_PASSWORD")

    print("Testing Oracle connection to MAINBASE...")
    print(f"User: {user}")
    print(f"DSN: {dsn}")
    print(f"Wallet Location: {wallet_location}")

    try:
        # Set TNS_ADMIN environment variable
        os.environ["TNS_ADMIN"] = str(Path(wallet_location).resolve())

        # Create connection
        conn = OracleConnection(
            user=user,
            password=password,
            dsn=dsn,
            wallet_location=wallet_location,
            wallet_password=wallet_password,
        )

        print("1. Connecting to database...")
        conn.connect()
        print("✓ Successfully connected to Oracle database!")

        print("\n2. Checking current user and schema...")
        cursor = conn.conn.cursor()

        # Get current user
        cursor.execute("SELECT USER FROM DUAL")
        current_user = cursor.fetchone()[0]
        print(f"✓ Connected as user: {current_user}")

        # Get current schema
        cursor.execute("SELECT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') FROM DUAL")
        current_schema = cursor.fetchone()[0]
        print(f"✓ Current schema: {current_schema}")

        print("\n3. Checking existing tables...")
        cursor.execute(
            """
            SELECT table_name FROM user_tables 
            ORDER BY table_name
        """
        )
        tables = cursor.fetchall()

        if tables:
            print("✓ Existing tables in current schema:")
            for table in tables:
                print(f"  - {table[0]}")
        else:
            print("✓ No existing tables in current schema")

        print("\n4. Testing workflow_outputs table creation...")
        try:
            cursor.execute(
                """
                BEGIN
                    EXECUTE IMMEDIATE 'CREATE TABLE workflow_outputs (
                        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        workflow_name VARCHAR2(255) NOT NULL,
                        output_data CLOB NOT NULL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )';
                EXCEPTION
                    WHEN OTHERS THEN
                        IF SQLCODE != -955 THEN  -- Table already exists
                            RAISE;
                        END IF;
                END;
            """
            )
            conn.conn.commit()
            print("✓ workflow_outputs table created/verified")
        except Exception as e:
            print(f"✗ Error creating table: {e}")

        print("\n5. Testing basic workflow operations...")
        test_data = {
            "test": "oracle_connection",
            "status": "success",
            "timestamp": "2025-01-08",
        }

        # Store test output
        conn.store_output("oracle_test", test_data)
        print("✓ Successfully stored test workflow output")

        # Retrieve test output
        outputs = conn.get_outputs("oracle_test")
        print(f"✓ Successfully retrieved {len(outputs)} workflow outputs")

        if outputs:
            print("Sample output:", outputs[0])

        cursor.close()

        print("\n6. Checking schemas and privileges...")
        cursor = conn.conn.cursor()

        # Check if we can create schemas
        cursor.execute(
            """
            SELECT privilege FROM user_sys_privs 
            WHERE privilege IN ('CREATE ANY USER', 'CREATE USER', 'CREATE SCHEMA')
        """
        )
        schema_privs = cursor.fetchall()

        if schema_privs:
            print("✓ Schema creation privileges:")
            for priv in schema_privs:
                print(f"  - {priv[0]}")
        else:
            print("! No schema creation privileges found")
            print("  (This is normal for Autonomous DB - schemas = users)")

        cursor.close()

        print("\n7. Disconnecting...")
        conn.disconnect()
        print("✓ Successfully disconnected")

        print("\n=== CONNECTION TEST SUCCESSFUL ===")
        return True

    except Exception as e:
        print(f"✗ Error: {e}")
        print("\n=== CONNECTION TEST FAILED ===")
        return False


if __name__ == "__main__":
    success = test_oracle_connection()
    sys.exit(0 if success else 1)
