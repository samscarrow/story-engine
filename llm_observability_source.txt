--- /home/sam/src/llm-observability-suite/llm_observability/__init__.py ---

from .core import get_logger
from .db_logger import DBLogger

__all__ = ["get_logger", "DBLogger"]

--- /home/sam/src/llm-observability-suite/llm_observability/core.py ---

import logging
import json
import os

def get_logger(name: str):
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)

    log_format = os.environ.get("LOG_FORMAT", "text")
    log_dest = os.environ.get("LOG_DEST", "stderr")

    if log_dest == "stdout":
        handler = logging.StreamHandler()
    else:
        handler = logging.StreamHandler() # default to stderr

    if log_format == "json":
        formatter = JsonFormatter()
    else:
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    handler.setFormatter(formatter)

    if not logger.handlers:
        logger.addHandler(handler)

    return logger

class JsonFormatter(logging.Formatter):
    def format(self, record):
        log_record = {
            "timestamp": self.formatTime(record, self.datefmt),
            "name": record.name,
            "level": record.levelname,
            "message": record.getMessage(),
        }
        if record.exc_info:
            log_record['exc_info'] = self.formatException(record.exc_info)

        # Add extra fields
        if hasattr(record, 'extra'):
            log_record.update(record.extra)

        return json.dumps(log_record)

--- /home/sam/src/llm-observability-suite/llm_observability/db_logger.py ---

import sqlalchemy
from sqlalchemy import text

class DBLogger:
    def __init__(self, db_uri: str):
        self.engine = sqlalchemy.create_engine(db_uri)

    def log_event(self, table_name: str, event_data: dict):
        with self.engine.connect() as connection:
            columns = ", ".join(event_data.keys())
            placeholders = ", ".join(f":{key}" for key in event_data.keys())
            statement = text(f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})")
            connection.execute(statement, **event_data)

--- /home/sam/src/llm-observability-suite/pyproject.toml ---

[project]
name = "llm-observability-suite"
version = "0.1.0"
description = "A suite for LLM observability."
authors = [{ name = "Gemini", email = "gemini@example.com" }]
requires-python = ">=3.8"
dependencies = [
    "sqlalchemy"
]

[tool.setuptools]
packages = ["llm_observability"]

