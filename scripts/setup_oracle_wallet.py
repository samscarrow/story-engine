#!/usr/bin/env python3
"""
Oracle Wallet Setup Helper

This script helps set up Oracle wallet configuration for the story engine.
"""

import zipfile
import argparse
from pathlib import Path

def extract_wallet(wallet_zip_path: str, target_dir: str = None) -> str:
    """Extract Oracle wallet zip file to target directory."""
    wallet_path = Path(wallet_zip_path)
    if not wallet_path.exists():
        raise FileNotFoundError(f"Wallet file not found: {wallet_zip_path}")
    
    if target_dir is None:
        target_dir = f"./wallet_{wallet_path.stem}"
    
    target_path = Path(target_dir)
    target_path.mkdir(exist_ok=True, parents=True)
    
    with zipfile.ZipFile(wallet_zip_path, 'r') as zip_ref:
        zip_ref.extractall(target_path)
    
    print(f"Wallet extracted to: {target_path.absolute()}")
    
    # List extracted files
    print("\nWallet contents:")
    for file in target_path.iterdir():
        print(f"  {file.name}")
    
    return str(target_path.absolute())

def create_env_config(wallet_dir: str, db_user: str, db_dsn: str, output_file: str = ".env.oracle"):
    """Create environment configuration file."""
    config_content = f"""# Oracle Database Configuration - Generated by setup_oracle_wallet.py

# Database Type
DB_TYPE=oracle

# Oracle Connection Details  
DB_USER={db_user}
DB_PASSWORD=your_password_here
DB_DSN={db_dsn}

# Oracle Wallet Configuration
DB_WALLET_LOCATION={wallet_dir}

# Note: Add your actual password to DB_PASSWORD above
"""
    
    with open(output_file, 'w') as f:
        f.write(config_content)
    
    print(f"\nEnvironment config created: {output_file}")
    print("Remember to:")
    print("1. Set your actual password in DB_PASSWORD")
    print("2. Copy or source this file to .env")

def main():
    parser = argparse.ArgumentParser(description='Set up Oracle wallet for story engine')
    parser.add_argument('wallet_zip', help='Path to Oracle wallet zip file')
    parser.add_argument('--user', default='ADMIN', help='Database user (default: ADMIN)')
    parser.add_argument('--dsn', help='Database service name or TNS alias')
    parser.add_argument('--wallet-dir', help='Directory to extract wallet to')
    parser.add_argument('--env-file', default='.env.oracle', help='Environment file to create')
    
    args = parser.parse_args()
    
    try:
        # Extract wallet
        wallet_dir = extract_wallet(args.wallet_zip, args.wallet_dir)
        
        # Determine DSN if not provided
        dsn = args.dsn
        if not dsn:
            # Try to read from tnsnames.ora
            tnsnames_path = Path(wallet_dir) / 'tnsnames.ora'
            if tnsnames_path.exists():
                with open(tnsnames_path) as f:
                    content = f.read()
                    # Extract first alias (simple heuristic)
                    lines = content.split('\n')
                    for line in lines:
                        line = line.strip()
                        if '=' in line and not line.startswith('#'):
                            dsn = line.split('=')[0].strip()
                            break
                print(f"Found DSN from tnsnames.ora: {dsn}")
            else:
                dsn = "your_service_name_here"
        
        # Create environment config
        create_env_config(wallet_dir, args.user, dsn, args.env_file)
        
        print("\nSetup complete! Next steps:")
        print(f"1. Edit {args.env_file} to set your password")
        print(f"2. Source the environment: source {args.env_file}")
        print("3. Test connection with: python scripts/db_smoke_test.py")
        
    except Exception as e:
        print(f"Error: {e}")
        return 1
    
    return 0

if __name__ == '__main__':
    exit(main())