#!/usr/bin/env python3
"""Synchronise storyctl cluster settings into lmstudio-omnibus .env file."""

from __future__ import annotations

import argparse
import json
import subprocess
from pathlib import Path
from textwrap import dedent

DEFAULT_TARGET = Path(__file__).resolve().parents[1] / ".." / "src" / "lmstudio-omnibus" / ".env"
EXPORT_CMD = ["storyctl", "env", "export", "--env", "cluster", "--format", "json"]


def run() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "target",
        nargs="?",
        default=str(DEFAULT_TARGET),
        help="Destination .env file (default: ../src/lmstudio-omnibus/.env)",
    )
    args = parser.parse_args()
    target_path = Path(args.target).resolve()

    try:
        result = subprocess.run(EXPORT_CMD, capture_output=True, check=True, text=True)
    except subprocess.CalledProcessError as exc:
        raise SystemExit(
            f"storyctl env export failed with exit code {exc.returncode}: {exc.stderr.strip()}"
        )

    try:
        data = json.loads(result.stdout)
    except json.JSONDecodeError as exc:
        raise SystemExit(f"Unable to parse storyctl export as JSON: {exc}")

    ai_lb_endpoint = data.get("AI_LB_ENDPOINT")
    if not ai_lb_endpoint:
        raise SystemExit("storyctl cluster environment did not provide AI_LB_ENDPOINT")

    lm_endpoint = data.get("LM_ENDPOINT", ai_lb_endpoint)
    # Ensure we emit /v1 URL for LMSTUDIO_API_URL consumers
    if lm_endpoint.endswith("/v1"):
        lmstudio_api_url = lm_endpoint
    else:
        lmstudio_api_url = lm_endpoint.rstrip("/") + "/v1"

    lines = [
        "# Auto-generated by scripts/sync_lmstudio_omnibus_env.py",
        "# Do not edit manually; rerun the sync script when cluster settings change.",
        f"AILB_URL={ai_lb_endpoint}",
        f"LMSTUDIO_API_URL={lmstudio_api_url}",
    ]

    for key in sorted(data.keys()):
        if key.startswith("LM_NODE_"):
            lines.append(f"{key}={data[key]}")

    contents = "\n".join(lines) + "\n"
    target_path.parent.mkdir(parents=True, exist_ok=True)
    target_path.write_text(contents, encoding="utf-8")

    message = dedent(
        f"""
        Wrote cluster environment to {target_path}
        Included keys: AILB_URL, LMSTUDIO_API_URL, and LM_NODE_* entries.
        Rerun this script after updating storyctl's cluster configuration.
        """
    ).strip()
    print(message)


if __name__ == "__main__":
    run()
