name: Bootstrap POML Overhaul Issues

on:
  workflow_dispatch:
    inputs:
      create_labels:
        description: "Create standard labels"
        required: false
        default: "true"
      create_milestones:
        description: "Create standard milestones"
        required: false
        default: "true"
      project_url:
        description: "Optional GitHub Projects URL to add issues to (e.g., https://github.com/users/<username>/projects/<project_number>)"
        required: false
        default: ""
        type: string

permissions:
  issues: write
  contents: read
  repository-projects: write

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Ensure labels and milestones
        if: ${{ github.event.inputs.create_labels == 'true' || github.event.inputs.create_milestones == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const inputs = (context.payload && context.payload.inputs) || {};
            const labels = [
              'area:engine','area:orchestrator','area:validation','area:templates','area:tooling','area:security','area:ci',
              'agent:engine_integrator','agent:orchestrator_refactorer','agent:validation_engineer','agent:templates_curator','agent:tooling_engineer','agent:cache_engineer','agent:docs_ci_writer','agent:security_engineer',
              'priority:p0','priority:p1','priority:p2','size:S','size:M','size:L','type:feature','type:bug','type:doc','type:chore'
            ];
            if ((inputs.create_labels || 'true') === 'true') {
              for (const name of labels) {
                try {
                  await github.rest.issues.getLabel({owner: context.repo.owner, repo: context.repo.repo, name});
                } catch(e) {
                  await github.rest.issues.createLabel({owner: context.repo.owner, repo: context.repo.repo, name, color: 'C2E0C6'});
                }
              }
            }
            const milestones = ['M2 SDK Integration','M3 Orchestrator & Adapter','M4 Validation & Schemas','M5 CLI & Tooling','M6 Templates & Goldens','M7 Cache/Hot Reload','M8 CI & Docs'];
            if ((inputs.create_milestones || 'true') === 'true') {
              for (const title of milestones) {
                const list = await github.rest.issues.listMilestones({owner: context.repo.owner, repo: context.repo.repo, state: 'open'});
                if (!list.data.find(m => m.title === title)) {
                  await github.rest.issues.createMilestone({owner: context.repo.owner, repo: context.repo.repo, title});
                }
              }
            }
      - name: Create issues from manifest
        id: create_issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const yaml = require('yaml');
            const manifest = yaml.parse(fs.readFileSync('agents/tickets.yml', 'utf8'));
            const created = [];
            for (const t of manifest.tickets) {
              // Resolve milestone id
              let milestoneNumber = undefined;
              if (t.milestone) {
                const list = await github.rest.issues.listMilestones({owner: context.repo.owner, repo: context.repo.repo, state: 'open'});
                const m = list.data.find(m => m.title === t.milestone);
                milestoneNumber = m ? m.number : undefined;
              }
              let body = `Tracking ticket ${t.key}.`;
              if (t.body_from_agent && t.agent) {
                const agentPath = `agents/${t.agent}.md`;
                if (fs.existsSync(agentPath)) {
                  const prompt = fs.readFileSync(agentPath, 'utf8');
                  body = `System prompt for ${t.agent}:\n\n` + prompt;
                }
              }
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: t.title,
                labels: t.labels || [],
                assignees: t.assignees || [],
                milestone: milestoneNumber,
                body,
              });
              created.push(issue.data.html_url);
            }
            core.setOutput('urls', JSON.stringify(created));
      - name: Add to project (optional)
        if: ${{ github.event.inputs.project_url && github.event.inputs.project_url != '' }}
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: ${{ github.event.inputs.project_url }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          labeled: "agent:engine_integrator,agent:orchestrator_refactorer,agent:validation_engineer,agent:templates_curator,agent:tooling_engineer,agent:cache_engineer,agent:docs_ci_writer,agent:security_engineer"
